#!/usr/bin/env python3

import requests
import os
import datetime
import chess.pgn
import csv

HEADERS = {"User-Agent": "Mozilla/5.0"}

def get_archive_urls(username):
    url = f"https://api.chess.com/pub/player/{username}/games/archives"
    try:
        resp = requests.get(url, headers=HEADERS)
        resp.raise_for_status()
        return resp.json().get("archives", [])
    except requests.RequestException as e:
        print(f"‚ùå HTTP error: {e}")
        return []

def download_pgn(username, archive_url, download_dir):
    date_segment = archive_url.split("/")[-2:]
    date_str = "-".join(date_segment)
    filename = f"{username}_{date_str}.pgn"
    filepath = os.path.join(download_dir, filename)

    if os.path.exists(filepath):
        print(f"‚úÖ Already downloaded: {filename}")
        return filepath

    pgn_url = f"{archive_url}/pgn"
    try:
        resp = requests.get(pgn_url, headers=HEADERS)
        resp.raise_for_status()
        with open(filepath, "w", encoding="utf-8") as f:
            f.write(resp.text)
        print(f"‚¨áÔ∏è  Downloaded: {filename}")
        return filepath
    except requests.RequestException as e:
        print(f"‚ùå Failed to download {pgn_url}: {e}")
        return None

def extract_opponents_from_pgn_files(username, archive_dir):
    opponents = set()
    for filename in os.listdir(archive_dir):
        if not filename.endswith(".pgn"):
            continue
        filepath = os.path.join(archive_dir, filename)
        with open(filepath, "r", encoding="utf-8") as f:
            while True:
                game = chess.pgn.read_game(f)
                if game is None:
                    break
                white = game.headers.get("White", "").lower()
                black = game.headers.get("Black", "").lower()
                if white == username.lower():
                    opponents.add(black)
                elif black == username.lower():
                    opponents.add(white)
    return sorted(opponents)

def fetch_account_info(username):
    api_url = f"https://api.chess.com/pub/player/{username}"
    try:
        resp = requests.get(api_url, headers=HEADERS)
        if resp.status_code == 404:
            return None, "Not found"
        resp.raise_for_status()
        data = resp.json()
        return {
            "Player_id": data.get("player_id"),
            "API_URL": api_url,
            "User_URL": f"https://www.chess.com/member/{data.get('username', username)}",
            "Username": data.get("username", ""),
            "Title": data.get("title", ""),
            "Followers": data.get("followers", 0),
            "Country": data.get("country", "").split("/")[-1],
            "Last_online": data.get("last_online", 0),
            "Joined": data.get("joined", 0),
            "Status": data.get("status", ""),
            "League": data.get("league", "")
        }, None
    except requests.RequestException as e:
        return None, str(e)

def main():
    username = input("Enter Chess.com username: ").strip().lower()
    timestamp = datetime.datetime.now().strftime("%y%m%d")
    archive_dir = os.path.join(os.getcwd(), "archives")
    opponents_file = f"{timestamp}-opponents.txt"
    data_file = f"{timestamp}-opp-data.csv"
    error_log = f"{timestamp}-error.log"
    fpv_file = f"{timestamp}-fpv.csv"
    abuse_file = f"{timestamp}-abuse.csv"
    self_file = f"{timestamp}-self.csv"

    os.makedirs(archive_dir, exist_ok=True)

    print(f"\nüìÅ Downloading archives to: {archive_dir}")
    archive_urls = get_archive_urls(username)
    for url in archive_urls:
        download_pgn(username, url, archive_dir)

    print("\nüë• Extracting opponent usernames...")
    opponents = extract_opponents_from_pgn_files(username, archive_dir)
    with open(opponents_file, "w") as f:
        for opp in opponents:
            f.write(f"{opp}\n")
    print(f"‚úÖ Saved opponents to {opponents_file}")

    print("\nüåê Fetching account info...")
    with open(data_file, "w", newline="") as csvfile,          open(fpv_file, "w", newline="") as fpv_csv,          open(abuse_file, "w", newline="") as abuse_csv,          open(self_file, "w", newline="") as self_csv,          open(error_log, "w") as errfile:

        fieldnames = ["Player_id", "API_URL", "User_URL", "Username", "Title", "Followers", "Country", "Last_online", "Joined", "Status", "League"]
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer_fpv = csv.DictWriter(fpv_csv, fieldnames=fieldnames)
        writer_abuse = csv.DictWriter(abuse_csv, fieldnames=fieldnames)
        writer_self = csv.DictWriter(self_csv, fieldnames=fieldnames)

        writer.writeheader()
        writer_fpv.writeheader()
        writer_abuse.writeheader()
        writer_self.writeheader()

        total = len(opponents)
        for idx, opp in enumerate(opponents, start=1):
            print(f"[{idx}/{total}] Fetching: {opp}")
            info, error = fetch_account_info(opp)
            if info:
                writer.writerow(info)
                status = str(info.get("Status", "")).strip().lower()
                if status == "closed:fair_play_violations":
                    writer_fpv.writerow(info)
                elif status == "closed:abuse":
                    writer_abuse.writerow(info)
                elif status == "closed":
                    writer_self.writerow(info)
                elif status.startswith("closed"):
                    print(f"‚ö†Ô∏è  Unmatched closed status for {opp}: '{status}'")
                    errfile.write(f"{opp}: unmatched closed status '{status}'\n")
            else:
                errfile.write(f"{opp}: {error}\n")
                print(f"‚ö†Ô∏è  Failed to fetch {opp}: {error}")

    print(f"‚úÖ Account data saved to {data_file}")
    print(f"üìÑ Errors logged to {error_log}")
    print(f"üìÑ FPV accounts saved to {fpv_file}")
    print(f"üìÑ Abuse accounts saved to {abuse_file}")
    print(f"üìÑ Closed (self) accounts saved to {self_file}")

    def extract_usernames_from_csv(csv_path, txt_path):
        with open(csv_path, newline="") as csvfile, open(txt_path, "w") as txtfile:
            reader = csv.DictReader(csvfile)
            for row in reader:
                txtfile.write(f"{row['Username'].lower()}\n")

    extract_usernames_from_csv(fpv_file, f"{timestamp}-fpv.txt")
    extract_usernames_from_csv(abuse_file, f"{timestamp}-abuse.txt")
    extract_usernames_from_csv(self_file, f"{timestamp}-self.txt")

    print(f"üìÑ FPV usernames saved to {timestamp}-fpv.txt")
    print(f"üìÑ Abuse usernames saved to {timestamp}-abuse.txt")
    print(f"üìÑ Self usernames saved to {timestamp}-self.txt")

if __name__ == "__main__":
    main()
